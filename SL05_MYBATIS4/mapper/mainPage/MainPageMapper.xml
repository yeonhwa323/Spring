<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.blackolive.app.mapper.mainPage.MainPageMapper">

	<select id="getExample" resultType="com.blackolive.app.domain.mainPage.ExampleDTO1">
		SELECT * FROM example	
	</select>


<select id="selectUserInfo" resultType="OliveUserDTO">
	select * from olive_user u join userprofile uf on u.user_id = uf.user_id where u.user_id = #{userId}
</select>

<select id="similarUser" resultType="String">
	SELECT ou.user_id 
				 FROM olive_user ou 
			 JOIN userprofile up ON ou.user_id = up.user_id
			 WHERE user_gender = #{gender} 
			 AND skintone_id = #{skintoneId} AND skintype_id = #{skintypeId}
			 AND user_birth BETWEEN #{beforeBirth} AND #{afterBirth}
</select>

<select id="similarProduct" resultType="String">
SELECT product_display_id, total_product_cnt FROM ( 
				 SELECT pd.product_display_id , SUM(op.product_cnt) AS total_product_cnt 
				    FROM olive_order oo 
				   JOIN olive_user ou ON oo.user_id = ou.user_id 
				   JOIN order_product op ON oo.order_id = op.order_id 
				    JOIN product p ON p.product_id = op.product_id 
				    JOIN product_display pd ON p.product_display_id = pd.product_display_id 
                    where ou.user_id in 
                    <foreach collection="userList" item="userList" open="("
					close=")" separator=",">
					#{userList}
				</foreach>
                    
				   GROUP BY  pd.product_display_id 
				    ORDER BY SUM(op.product_cnt) desc 
				 ) 
				 WHERE ROWNUM &lt;= 32
</select>

<select id="similardispl" resultType="ProductContainer">
select * from productcontainer where product_display_id in
<foreach collection="displList" item="displList" open="("
					close=")" separator=",">
					#{displList}
				</foreach>
</select>


<!-- int insertUserView(@Param("userId")String userId, @Param("categoryMidId")String categoryMidId);
	
	int checkUserVIew(@Param("userId")String userId, @Param("categoryMidId")String categoryMidId);
	
	int updateUserView(@Param("userId")String userId, @Param("categoryMidId")String categoryMidId);
	
	public List<ProductContainer> selectUserVIew(@Param("userId")String userId, @Param("categoryMidId")List<String> categoryMidId); -->

<insert id="insertUserView">
	INSERT INTO user_view (view_seq,user_id,category_mid_id,cnt) VALUES(userview_seq.NEXTVAL,#{userId},#{categoryMidId},1)
</insert>

<select id="checkUserVIew" resultType="int">
	select count(*) from user_view where user_id =#{userId} AND category_mid_id=#{categoryMidId}
</select>

	<update id="updateUserView">
		UPDATE user_view
		SET cnt = cnt +1
		WHERE user_id =#{userId} AND category_mid_id=#{categoryMidId}
	</update>
	
	<select id="selectUserVIew" resultType="ProductContainer">
		SELECT * 
				 FROM ( 
				    SELECT * 
				    FROM PRODUCTCONTAINER 
				WHERE category_mid_id IN
				<foreach collection="categoryMidId" item="categoryMidId" open="("
					close=")" separator=",">
					#{categoryMidId}
				</foreach>
			

		    ORDER BY DBMS_RANDOM.VALUE
		)		 WHERE ROWNUM &lt;= 20
	</select>
	
	<select id="selectcategoryMidId" resultType="String">
		SELECT category_mid_id FROM ( 
				 SELECT category_mid_id FROM user_view 
				 WHERE user_id = #{userId}
				GROUP BY category_mid_id 
				 ORDER BY count(*) DESC 
				 ) 
				 WHERE ROWNUM &lt;= 2 
	</select>

</mapper>